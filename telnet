import pexpect

# Define variables
ip_address = '192.168.56.101'
username = 'cisco'
password = 'cisco123!'
new_hostname = 'R1'

# Log SSH session for debugging
session_log = open('telnet_session_log.txt', 'w')

# Start Telnet session
print('--- Starting Telnet session...')
session = pexpect.spawn('telnet ' + ip_address, encoding='utf-8', timeout=40)
session.logfile = session_log  # Enable logging to file

# Check for the username prompt
result = session.expect(['Username:', pexpect.TIMEOUT])

if result != 0:
    print('--- FAILURE! creating Telnet session for: ', ip_address)
    session_log.close()
    exit()

# Send the username
session.sendline(username)
result = session.expect(['Password:', pexpect.TIMEOUT])

if result != 0:
    print('--- Failure! entering username: ', username)
    session_log.close()
    exit()

# Send the password
session.sendline(password)
result = session.expect(['#', pexpect.TIMEOUT])

if result != 0:
    print('--- FAILURE! entering password: ', password)
    session_log.close()
    exit()

print('--- Success! Telnet session established.')

# Enter enable mode
print('--- Entering enable mode...')
session.sendline('enable')
result = session.expect(['Password:', pexpect.TIMEOUT])

if result != 0:
    print('--- Failure! entering enable mode')
    session_log.close()
    exit()

# Send enable password
session.sendline(password)
result = session.expect(['#', pexpect.TIMEOUT])

if result != 0:
    print('--- Failure! entering enable mode after sending password')
    session_log.close()
    exit()

# Enter configuration mode
print('--- Entering configuration mode...')
session.sendline('configure terminal')
result = session.expect([r'.\(config\)#', pexpect.TIMEOUT])

if result != 0:
    print('--- Failure! entering config mode')
    session_log.close()
    exit()

# Change the hostname to R1
print(f'--- Changing hostname to {new_hostname}...')
session.sendline(f'hostname {new_hostname}')
result = session.expect([rf'{new_hostname}\(config\)#', pexpect.TIMEOUT])

if result != 0:
    print(f'--- Failure! setting hostname to {new_hostname}')
    session_log.close()
    exit()

# Exit configuration mode
print('--- Exiting configuration mode...')
session.sendline('exit')

# Send command to output the running configuration
print('--- Retrieving running configuration...')
session.sendline('show running-config')

# Capture the running configuration
result = session.expect(['#', pexpect.TIMEOUT, pexpect.EOF])

# Save running configuration to a file
if result == 0:
    running_config = session.before
    with open('telnet_running_config.txt', 'w') as config_file:
        config_file.write(running_config)
    print('--- Running configuration saved to telnet_running_config.txt')
else:
    print('--- Failure retrieving running configuration')

# Exit Telnet session
print('--- Closing Telnet session...')
session.sendline('quit')

# Display success message if everything worked
print('------------------------------------------------------')
print('')
print(f'--- Success! connecting to: {ip_address}')
print(f'---               Username: {username}')
print(f'---               Password: {password}')
print('')
print('------------------------------------------------------')

# Close the Telnet session
session.close()
session_log.close()
